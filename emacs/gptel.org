#+STARTUP: content
* gptel
** resources

[[https://github.com/karthink/gptel]]

** init.el

#+begin_src sh
vi ~/.config/emacs/init.el
#+end_src

#+begin_src elisp
;; ----------------------------------------------------------------------------------
;; auth-source
;; ----------------------------------------------------------------------------------

(require 'auth-source)
(add-to-list 'auth-sources (expand-file-name ".authinfo" user-emacs-directory))


;; ----------------------------------------------------------------------------------
;; gptel
;; ----------------------------------------------------------------------------------

(use-package gptel
  :init
  ;; Enable tool use
  (setq gptel-use-tools t)
  (setq gptel-default-mode 'org-mode
        gptel-post-response-functions #'gptel-end-of-response
        gptel-expert-commands t)
  :config
  (setq gptel-model 'mistral:7b)
  (setq gptel-model 'llama3.1:8b)
  (setq gptel-model 'gemma3:4b)
  (setq gptel-model 'deepseek-r1:8b)
  (setq gptel-backend (gptel-make-ollama "Ollama"
                        :host "localhost:11434"
                        :stream t
                        :models '(gemma3:4b
                                  mistral:7b
                                  llama3.1:8b
                                  deepseek-r1:8b)))

  (setq gptel-model 'gemini-2.5-flash
        gptel-backend (gptel-make-gemini "Gemini"
                                         :key (gptel-api-key-from-auth-source "generativelanguage.googleapis.com")
                                         :stream t))
  

;; ----------------------------------------------------------------------------------
;; display the Ollama buffer in same window
;; ----------------------------------------------------------------------------------

  (add-to-list 'display-buffer-alist
     '("^*Ollama*" display-buffer-same-window))


;; ----------------------------------------------------------------------------------
;; display the Gemini buffer in same window
;; ----------------------------------------------------------------------------------

  (add-to-list 'display-buffer-alist
               '("^*Gemini*" display-buffer-same-window))


;; ----------------------------------------------------------------------------------
;; gptel set org source blocks to use sh and not bash
;; ----------------------------------------------------------------------------------

  (defun my/gptel-fix-src-header (beg end)
    (save-excursion
      (goto-char beg)
      (while (re-search-forward "^#\\+begin_src bash" end t)
        (replace-match "#+begin_src sh"))))


;; ----------------------------------------------------------------------------------
;; gptel-tools create file
;; ----------------------------------------------------------------------------------

    (gptel-make-tool
     :function (lambda (path filename content)
                 (let ((full-path (expand-file-name filename path)))
                   (with-temp-buffer
                     (insert content)
                     (write-file full-path))
                   (format "Created file %s in %s" filename path)))
     :name "create_file"
     :description "Create a new file with the specified content"
     :args (list '(:name "path"
                   :type string
                   :description "The directory where to create the file")
                 '(:name "filename"
                   :type string
                   :description "The name of the file to create")
                 '(:name "content"
                   :type string
                   :description "The content to write to the file"))
     :category "filesystem")


;; ----------------------------------------------------------------------------------
;; gptel-tools read file
;; ----------------------------------------------------------------------------------

  (gptel-make-tool
   :function (lambda (filepath)
               (with-temp-buffer
                 (insert-file-contents (expand-file-name filepath))
                 (buffer-string)))
   :name "read_file"
   :description "Read and display the contents of a file"
   :args (list '(:name "filepath"
                 :type string
                 :description "Path to the file to read. Supports relative paths and ~."))
   :category "filesystem")


;; ----------------------------------------------------------------------------------
;; gptel-tools edit file
;; ----------------------------------------------------------------------------------

  (defun my-gptel--edit_file (file-path file-edits)
    "In FILE-PATH, apply FILE-EDITS with pattern matching and replacing."
    (if (and file-path (not (string= file-path "")) file-edits)
        (with-current-buffer (get-buffer-create "*edit-file*")
          (erase-buffer)
          (insert-file-contents (expand-file-name file-path))
          (let ((inhibit-read-only t)
                (case-fold-search nil)
                (file-name (expand-file-name file-path))
                (edit-success nil))
            ;; apply changes
            (dolist (file-edit (seq-into file-edits 'list))
              (when-let ((line-number (plist-get file-edit :line_number))
                         (old-string (plist-get file-edit :old_string))
                         (new-string (plist-get file-edit :new_string))
                         (is-valid-old-string (not (string= old-string ""))))
                (goto-char (point-min))
                (forward-line (1- line-number))
                (when (search-forward old-string nil t)
                  (replace-match new-string t t)
                  (setq edit-success t))))
            ;; return result to gptel
            (if edit-success
                (progn
                  ;; show diffs
                  (ediff-buffers (find-file-noselect file-name) (current-buffer))
                  (format "Successfully edited %s" file-name))
              (format "Failed to edited %s" file-name))))
      (format "Failed to edited %s" file-path)))
  
  (gptel-make-tool
     :function #'my-gptel--edit_file
     :name "edit_file"
     :description "Edit file with a list of edits, each edit contains a line-number,
  a old-string and a new-string, new-string will replace the old-string at the specified line."
     :args (list '(:name "file-path"
                         :type string
                         :description "The full path of the file to edit")
                 '(:name "file-edits"
                         :type array
                         :items (:type object
                                       :properties
                                       (:line_number
                                        (:type integer :description "The line number of the file where edit starts.")
                                        :old_string
                                        (:type string :description "The old-string to be replaced.")
                                        :new_string
                                        (:type string :description "The new-string to replace old-string.")))
                         :description "The list of edits to apply on the file"))
     :category "filesystem")


;; ----------------------------------------------------------------------------------
;; gptel-tools read buffer
;; ----------------------------------------------------------------------------------

    (gptel-make-tool
     :function (lambda (buffer)
                 (unless (buffer-live-p (get-buffer buffer))
                   (error "Error: buffer %s is not live." buffer))
                 (with-current-buffer buffer
                   (buffer-substring-no-properties (point-min) (point-max))))
     :name "read_buffer"
     :description "Return the contents of an Emacs buffer"
     :args (list '(:name "buffer"
                   :type string
                   :description "The name of the buffer whose contents are to be retrieved"))
     :category "emacs")


;; ----------------------------------------------------------------------------------
;; gptel-tools read url
;; ----------------------------------------------------------------------------------

    (gptel-make-tool
     :function (lambda (url)
                 (with-current-buffer (url-retrieve-synchronously url)
                   (goto-char (point-min))
                   (forward-paragraph)
                   (let ((dom (libxml-parse-html-region (point) (point-max))))
                     (run-at-time 0 nil #'kill-buffer (current-buffer))
                     (with-temp-buffer
                       (shr-insert-document dom)
                       (buffer-substring-no-properties (point-min) (point-max))))))
     :name "read_url"
     :description "Fetch and read the contents of a URL"
     :args (list '(:name "url"
                   :type string
                   :description "The URL to read"))
     :category "web")

    ;; end of gptel use-package config
    (add-hook 'gptel-post-response-functions #'my/gptel-fix-src-header)) 
#+end_src

** authinfo

[[https://aistudio.google.com/app/apikey]]

#+begin_src 
vi ~/.config/emacs/.authinfo
#+end_src

#+begin_src conf
machine generativelanguage.googleapis.com password token
#+end_src
